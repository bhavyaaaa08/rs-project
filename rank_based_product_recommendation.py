# -*- coding: utf-8 -*-
"""rank_based_product_recommendation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tBr2TVD2BG6Jx_apIl0IN5m48JSdrYeb
"""

import warnings
warnings.filterwarnings('ignore')

import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.metrics.pairwise import cosine_similarity

from sklearn.metrics import mean_squared_error


import kagglehub
import pandas as pd
import os

path = kagglehub.dataset_download("vibivij/amazon-electronics-rating-datasetrecommendation")

print("Path to dataset files:", path)

files = os.listdir(path)
print(files)
file_name = "ratings_Electronics.csv"
df = pd.read_csv(os.path.join(path, file_name))
print(df.head(1))

df.columns = ['user_id', 'prod_id', 'rating', 'timestamp']

df = df.drop('timestamp', axis=1)

rows, columns = df.shape
print("No of rows = ", rows)
print("No of columns = ", columns)


df.info()


df.isna().sum()


df['rating'].describe()


plt.figure(figsize = (12,6))
df['rating'].value_counts(1).plot(kind='bar')
plt.show()



print('Number of unique USERS in Raw data = ', df['user_id'].nunique())
print('Number of unique ITEMS in Raw data = ', df['prod_id'].nunique())


most_rated = df.groupby('user_id').size().sort_values(ascending=False)[:10]
most_rated


counts = df['user_id'].value_counts()
df_final = df[df['user_id'].isin(counts[counts >= 50].index)]

print('The number of observations in the final data =', len(df_final))
print('Number of unique USERS in the final data = ', df_final['user_id'].nunique())
print('Number of unique PRODUCTS in the final data = ', df_final['prod_id'].nunique())


final_ratings_matrix = df_final.pivot(index = 'user_id', columns ='prod_id', values = 'rating').fillna(0)
print('Shape of final_ratings_matrix: ', final_ratings_matrix.shape)

given_num_of_ratings = np.count_nonzero(final_ratings_matrix)
print('given_num_of_ratings = ', given_num_of_ratings)

possible_num_of_ratings = final_ratings_matrix.shape[0] * final_ratings_matrix.shape[1]
print('possible_num_of_ratings = ', possible_num_of_ratings)

density = (given_num_of_ratings/possible_num_of_ratings)
density *= 100
print ('density: {:4.2f}%'.format(density))

final_ratings_matrix.head()


df_final['rating'] = pd.to_numeric(df_final['rating'], errors='coerce')

average_rating = df_final.groupby('prod_id')['rating'].mean()
count_rating = df_final.groupby('prod_id')['rating'].count()

final_rating = pd.DataFrame({'avg_rating': average_rating, 'rating_count': count_rating})

final_rating = final_rating.sort_values(by='avg_rating', ascending=False)

print(final_rating.head(10))

def top_n_products(final_rating, n, min_interaction):

    recommendations = final_rating[final_rating['rating_count']>min_interaction]

    recommendations = recommendations.sort_values('avg_rating',ascending=False)

    return recommendations.index[:n]


list(top_n_products(final_rating, 5, 50))


list(top_n_products(final_rating, 5, 100))