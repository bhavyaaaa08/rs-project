# -*- coding: utf-8 -*-
"""Model_based_collaborative_filtering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UV5aqelmy_oABNO3c3_0rI2qGsmdTuCg

#E-commerce Product recommendation System

##Importing libraries
"""

import warnings
warnings.filterwarnings('ignore')

import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.metrics.pairwise import cosine_similarity

from sklearn.metrics import mean_squared_error

from scipy.sparse.linalg import svds


import kagglehub
import pandas as pd
import os

path = kagglehub.dataset_download("vibivij/amazon-electronics-rating-datasetrecommendation")

print("Path to dataset files:", path)

files = os.listdir(path)
print(files)
file_name = "ratings_Electronics.csv"
df = pd.read_csv(os.path.join(path, file_name))
print(df.head(1))

rows, columns = df.shape
print("No of rows = ", rows)
print("No of columns = ", columns)


df.columns = ['user_id', 'prod_id', 'rating', 'timestamp']

df = df.drop('timestamp', axis=1)

df_copy = df.copy(deep=True)

df.info()


df.isna().sum()


df['rating'].describe()



plt.figure(figsize = (12,6))
df['rating'].value_counts(1).plot(kind='bar')
plt.show()

print('Number of unique USERS in Raw data = ', df['user_id'].nunique())
print('Number of unique ITEMS in Raw data = ', df['prod_id'].nunique())


most_rated = df.groupby('user_id').size().sort_values(ascending=False)[:10]
most_rated


counts = df['user_id'].value_counts()
df_final = df[df['user_id'].isin(counts[counts >= 50].index)]

print('The number of observations in the final data =', len(df_final))
print('Number of unique USERS in the final data = ', df_final['user_id'].nunique())
print('Number of unique PRODUCTS in the final data = ', df_final['prod_id'].nunique())



final_ratings_matrix = df_final.pivot(index = 'user_id', columns ='prod_id', values = 'rating').fillna(0)
print('Shape of final_ratings_matrix: ', final_ratings_matrix.shape)

given_num_of_ratings = np.count_nonzero(final_ratings_matrix)
print('given_num_of_ratings = ', given_num_of_ratings)

possible_num_of_ratings = final_ratings_matrix.shape[0] * final_ratings_matrix.shape[1]
print('possible_num_of_ratings = ', possible_num_of_ratings)

density = (given_num_of_ratings/possible_num_of_ratings)
density *= 100
print ('density: {:4.2f}%'.format(density))

final_ratings_matrix.head()


from scipy.sparse import csr_matrix
final_ratings_sparse = csr_matrix(final_ratings_matrix.values)


U, s, Vt = svds(final_ratings_sparse, k = 50)

sigma = np.diag(s)

U.shape

sigma.shape

Vt.shape



all_user_predicted_ratings = np.dot(np.dot(U, sigma), Vt)

preds_df = pd.DataFrame(abs(all_user_predicted_ratings), columns = final_ratings_matrix.columns)
preds_df.head()
preds_matrix = csr_matrix(preds_df.values)


import numpy as np

def recommend_items(user_index, interactions_matrix, preds_matrix, num_recommendations):

    user_ratings = interactions_matrix[user_index,:].toarray().reshape(-1)
    user_predictions = preds_matrix[user_index,:].toarray().reshape(-1)

    temp = pd.DataFrame({'user_ratings': user_ratings, 'user_predictions': user_predictions})
    temp['Recommended Products'] = np.arange(len(user_ratings))
    temp = temp.set_index('Recommended Products')

    temp = temp.loc[temp.user_ratings == 0]

    temp = temp.sort_values('user_predictions',ascending=False)
    print('\nBelow are the recommended products for user(user_id = {}):\n'.format(user_index))
    print(temp['user_predictions'].head(num_recommendations))


recommend_items(121,final_ratings_sparse,preds_matrix,5)


recommend_items(100,final_ratings_sparse,preds_matrix,10)


final_ratings_matrix['user_index'] = np.arange(0, final_ratings_matrix.shape[0])
final_ratings_matrix.set_index(['user_index'], inplace=True)

final_ratings_matrix.head()

average_rating = final_ratings_matrix.mean()
average_rating.head()

preds_df.head()

avg_preds=preds_df.mean()
avg_preds.head()

rmse_df = pd.concat([average_rating, avg_preds], axis=1)

rmse_df.columns = ['Avg_actual_ratings', 'Avg_predicted_ratings']

rmse_df.head()

RMSE=mean_squared_error(rmse_df['Avg_actual_ratings'], rmse_df['Avg_predicted_ratings'], squared=False)
print(f'RMSE SVD Model = {RMSE} \n')

